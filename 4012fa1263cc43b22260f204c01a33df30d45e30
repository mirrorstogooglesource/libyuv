{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9c931da5_b6523d31",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3130632
      },
      "writtenOn": "2024-08-19T18:22:04Z",
      "side": 1,
      "message": "ping?",
      "revId": "4012fa1263cc43b22260f204c01a33df30d45e30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c64c02e_c3910a7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3130632
      },
      "writtenOn": "2024-09-20T16:36:32Z",
      "side": 1,
      "message": "ping?",
      "revId": "4012fa1263cc43b22260f204c01a33df30d45e30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a69bbb0b_65b774e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-09-20T21:33:34Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0c64c02e_c3910a7c",
      "revId": "4012fa1263cc43b22260f204c01a33df30d45e30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63c465e8_5017dfe3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-09-20T21:54:01Z",
      "side": 1,
      "message": "This is probably fine since all AArch64 platforms and 32-bit Arm Linux are unaffected by this change but I\u0027d be curious to know how you\u0027re compiling this.\n\nRelying on the compiler flags to determine whether we have Neon or not may or may not be safe depending on how exactly you\u0027re expecting this to be built:\n\n* If compiling through the existing BUILD.gn in libyuv then I would expect -mfpu\u003dneon to be passed unconditionally to all files, so this will always enable Neon and this patch has no effect.\n\n* If compiling with the existing CMakeLists.txt in libyuv then only the *_neon.cc files (and specifically _not_ cpu_id.cc) get compiled with -mfpu\u003dneon so this patch will have the effect of unconditionally disabling Neon on non-Linux 32-bit Arm platforms.\n\nObviously this subtle but dramatic difference in behaviour between the two build systems isn\u0027t ideal but I\u0027m imagining that you have a different setup which means that this isn\u0027t an issue in practice?\n\nUltimately though I don\u0027t have a particularly good suggestion for an alternative, so LGTM!",
      "revId": "4012fa1263cc43b22260f204c01a33df30d45e30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "632f0f5b_96397d12",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-09-20T22:12:37Z",
      "side": 1,
      "message": "benchmarked on my android device with Cortex A35, but running 32 bit, which is 100% equivalent to A32, aside from memory/clockrate\n\nlibyuv_test \u0027--gunit_filter\u003d*A*G*ToNV*Opt\u0027 --gunit_also_run_disabled_tests --libyuv_width\u003d1280 --libyuv_height\u003d720 --libyuv_repeat\u003d1000 --libyuv_flags\u003d-1 --libyuv_cpu_info\u003d-1\n\nfor 1280x720 ARGBToNV12 is 4.8 ms / frame.  Pretty slow\n[ RUN      ] LibYUVConvertTest.ARGBToNV12_Opt\n[       OK ] LibYUVConvertTest.ARGBToNV12_Opt (4862 ms)\n[ RUN      ] LibYUVConvertTest.ARGBToNV21_Opt\n[       OK ] LibYUVConvertTest.ARGBToNV21_Opt (4837 ms)\n[ RUN      ] LibYUVConvertTest.ABGRToNV12_Opt\n[       OK ] LibYUVConvertTest.ABGRToNV12_Opt (4858 ms)\n[ RUN      ] LibYUVConvertTest.ABGRToNV21_Opt\n[       OK ] LibYUVConvertTest.ABGRToNV21_Opt (4861 ms)",
      "revId": "4012fa1263cc43b22260f204c01a33df30d45e30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d8f2e9e_d65bda77",
        "filename": "source/cpu_id.cc",
        "patchSetId": 1
      },
      "lineNbr": 454,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-09-20T21:57:07Z",
      "side": 1,
      "message": "Nit/optional: We could split this (lines 454 - 479) into an `#if defined(__arm__)` block and an `#if defined(__aarch64__)`. These two cases share only one line of code (line 478). By separating the two cases, the code will be easier to understand.\n\nWe don\u0027t need to make this change in this CL.",
      "revId": "4012fa1263cc43b22260f204c01a33df30d45e30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3ead58a_725ebe9f",
        "filename": "source/cpu_id.cc",
        "patchSetId": 1
      },
      "lineNbr": 454,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-09-20T22:12:37Z",
      "side": 1,
      "message": "It could be cleaned up, but may be more complicated.  Theres nothing particularily 32 vs 64 bit specific here, but George added getauxval for aarch64 and only wrote row functions for row_neon64.cc for the newer ISA like dot product.\nThe getauxval is android specific and works in qemu, but has limited functionality and often does not report features in aarch32.\n/proc/cpuinfo does not work in the sandbox, and is linux specific.",
      "parentUuid": "8d8f2e9e_d65bda77",
      "revId": "4012fa1263cc43b22260f204c01a33df30d45e30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "If the author is a libyuv committer, code review is required from one other committer. Otherwise, code review is required from two committers."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "((uploaderin:cria/project-libyuv-committers AND label:Code-Review\u003dMAX,user\u003dnon_uploader) OR label:Code-Review\u003dMAX,count\u003e\u003d2) AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"((uploaderin:cria/project-libyuv-committers AND label:Code-Review=MAX,user=non_uploader) OR label:Code-Review=MAX,count>=2) AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MAX,count>=2"],"failingAtoms":["label:Code-Review=MIN","uploaderin:cria/project-libyuv-committers"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "4012fa1263cc43b22260f204c01a33df30d45e30",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4012fa1263cc43b22260f204c01a33df30d45e30",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4012fa1263cc43b22260f204c01a33df30d45e30",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}