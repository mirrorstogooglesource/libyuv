{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "01f470ac_ea669ca3",
        "filename": "source/row_sme.cc",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-10-28T20:26:15Z",
      "side": 1,
      "message": "nit I\u0027m not thrilled about the quirkiness of even/odd values for sve, while neon does a conventional layout... makes the macros harder to use/understand outside this context.",
      "fixSuggestions": [
        {
          "fixId": "a15d4c15_200417da",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "source/row_sme.cc",
              "range": {
                "startLine": 31,
                "startChar": 0,
                "endLine": 34,
                "endChar": 0
              },
              "replacement": "// Read twice as much data from YUV, putting the even elements from the Y data in\n// z0.h and odd elements in z1.h. U/V data is not duplicated, stored in z2.h/z3.h.\n"
            },
            {
              "path": "source/row_sme.cc",
              "range": {
                "startLine": 47,
                "startChar": 0,
                "endLine": 49,
                "endChar": 0
              },
              "replacement": "// Read twice as much data from YUV, putting the even elements from the Y data in\n// z0.h and odd elements in z1.h.\n"
            }
          ]
        }
      ],
      "revId": "5ac6b797f9531ce30e4d68a20a9ed0b34149dd70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27f40b70_040b71fe",
        "filename": "source/row_sme.cc",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1571352
      },
      "writtenOn": "2024-10-29T09:06:13Z",
      "side": 1,
      "message": "Agree it takes some getting used to. This is how a lot of SVE code expects to be written since e.g. all widening/narrowing instructions read/write operating on even and odd elements rather than low/high half like neon does.",
      "parentUuid": "01f470ac_ea669ca3",
      "revId": "5ac6b797f9531ce30e4d68a20a9ed0b34149dd70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb297c23_e6cee47d",
        "filename": "source/row_sme.cc",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1115898
      },
      "writtenOn": "2024-10-29T18:10:16Z",
      "side": 1,
      "message": "fwiw Intel have a new convert ne api that does the same when converting fp16/bf16 to float",
      "parentUuid": "27f40b70_040b71fe",
      "revId": "5ac6b797f9531ce30e4d68a20a9ed0b34149dd70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "If the author is a libyuv committer, code review is required from one other committer. Otherwise, code review is required from two committers."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "((uploaderin:cria/project-libyuv-committers AND label:Code-Review\u003dMAX,user\u003dnon_uploader) OR label:Code-Review\u003dMAX,count\u003e\u003d2) AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"((uploaderin:cria/project-libyuv-committers AND label:Code-Review=MAX,user=non_uploader) OR label:Code-Review=MAX,count>=2) AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader","uploaderin:cria/project-libyuv-committers","label:Code-Review=MAX,count>=2"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "5ac6b797f9531ce30e4d68a20a9ed0b34149dd70",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "5ac6b797f9531ce30e4d68a20a9ed0b34149dd70",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "5ac6b797f9531ce30e4d68a20a9ed0b34149dd70",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "5ac6b797f9531ce30e4d68a20a9ed0b34149dd70",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}